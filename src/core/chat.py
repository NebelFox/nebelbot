from __future__ import annotations

from typing import Callable, Dict, Iterable


class Chat:
    """
    Minimalistic abstraction over a chat.

    Adds "active" flag, which could be toggled and checked.

    Stores the chat member ids and their names, and gives access to them.

    The stored names are generated by <get_name> function,
    which provides the name for given user id.
    """

    def __init__(self,
                 active: bool,
                 members: Dict[int, str],
                 get_name: Callable[[int], str]):
        self._active = active
        self._members = members
        self._get_name = get_name

    @property
    def is_active(self) -> bool:
        """
        :return: True if this chat is active, False otherwise
        """
        return self._active

    def activate(self):
        """
        Mark this chat as active
        """
        self._active = True

    def deactivate(self):
        """
        Mark this chat as inactive
        """
        self._active = False

    def add_member(self, user_id: int):
        """
        Add a new member to the chat.
        The name for the member is generated via <get_name> function
        from the constructor.

        :param user_id: the id of the user to add
        """
        self._members[user_id] = self._get_name(user_id)

    @property
    def members(self) -> Dict[int, str]:
        """
        :return: the dictionary of stored user ids to generated names
        """
        return self._members

    def __getitem__(self, user_id: int) -> str:
        return self._members[user_id]

    def __contains__(self, user_id: int) -> bool:
        return user_id in self._members

    def __iter__(self) -> Iterable[int]:
        return iter(self._members)

    def __len__(self) -> int:
        return len(self._members)

    @classmethod
    def from_dict(cls,
                  data: dict,
                  get_name: Callable[[int], str]) -> Chat:
        """
        Constructs an instance of Chat by taking <active> and <members> values
        from respective dictionary keys.

        :param data: a dictionary containing "active: bool"
        and "members: Dict[int, str]" items.
        :param get_name: function to generate the name from user id
        """
        return cls(data.get('active', False),
                   data.get('members', ()),
                   get_name)

    def to_dict(self) -> Dict:
        """
        :return: a dictionary with "active: bool"
        and "members: Dict[int, str]" items from this instance state.
        """
        return {
            'active': self.is_active,
            'members': self._members
        }
